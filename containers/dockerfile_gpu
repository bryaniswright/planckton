# use digest instead of tag nvidia/cuda:11.1-devel-ubuntu20.04
FROM nvidia/cuda@sha256:768ceeaebb96bd35221aa43dfcb7b66eda5e293e5847c8bba18283be653d3525 

# miniconda

ENV CONDA_DIR="/opt/conda"
ENV PATH="$CONDA_DIR/bin:$PATH"
ENV LC_ALL=C.UTF-8
ENV LANG=C.UTF-8

RUN CONDA_VERSION="4.8.3" && \
    CONDA_MD5_CHECKSUM="d63adf39f2c220950a063e0529d4ff74" && \
    \
    apt update && \
    apt install --no-install-recommends -y wget tar ca-certificates bzip2 curl git ssh-client && \
    apt clean &&\
    rm -rf /var/lib/apt/lists/* && \
    \
    mkdir -p "$CONDA_DIR" && \
    wget "http://repo.continuum.io/miniconda/Miniconda3-py38_${CONDA_VERSION}-Linux-x86_64.sh" -O miniconda.sh && \
    echo "$CONDA_MD5_CHECKSUM  miniconda.sh" | md5sum -c && \
    bash miniconda.sh -f -b -p "$CONDA_DIR" && \
    rm miniconda.sh && \
    /opt/conda/bin/conda clean -tipsy && \
    ln -s /opt/conda/etc/profile.d/conda.sh /etc/profile.d/conda.sh && \
    echo ". /opt/conda/etc/profile.d/conda.sh" >> ~/.bashrc && \
    conda update --all --yes && \
    conda config --set auto_update_conda False && \
    conda init bash

# planckton

COPY environment.yml /

# build environment
RUN conda env create -f environment.yml && \
    conda init bash && \
    /opt/conda/bin/conda clean -tipsy && \
    echo "conda activate planckton" >> ~/.bashrc

# hoomd

ENV SOFTWARE_ROOT=/opt/hoomd
ENV PYTHONPATH=$PYTHONPATH:${SOFTWARE_ROOT}/lib/python
ENV HOOMD_TAG=v2.9.3

RUN source ~/.bashrc && \
    apt-get update && apt-get install -y --no-install-recommends git cmake && \
    apt clean && \
    rm -rf /var/lib/apt/lists/* && \
    pip --no-cache-dir install numpy && \
    git clone --recursive https://github.com/glotzerlab/hoomd-blue.git && \
    cd hoomd_blue && \
    git checkout $HOOMD_TAG && \
    mkdir build && \
    cd build && \
    export CXX="$(command -v g++)" && \
    export CC="$(command -v gcc)" && \
    cmake ../ -DCMAKE_INSTALL_PREFIX=${SOFTWARE_ROOT}/lib/python \
              -DENABLE_CUDA=ON \
              -DDISABLE_SQLITE=ON \
              -DSINGLE_PRECISION=ON && \
    make -j$(nproc) && \
    make install

# mount points for filesystems on clusters
RUN mkdir -p /nfs \
    mkdir -p /oasis \
    mkdir -p /scratch \
    mkdir -p /work \
    mkdir -p /projects \
    mkdir -p /home1
